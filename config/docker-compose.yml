services:
  rose-mysql:
    build:
      context: ./sql
    image: chensoul/rose-mysql
    container_name: rose-mysql
    restart: always
    environment:
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: 123456
    command: [
      'mysqld',
      '--log-bin=mysql-bin',
      '--binlog_format=ROW',
      '--default-time-zone=+8:00',
      '--lower-case-table-names=1'
    ]
    volumes:
      - ./sql/rose.sql:/docker-entrypoint-initdb.d/rose.sql:ro
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 5s
      timeout: 2s
      retries: 10
    ports:
      - "3306:3306"

  rose-nacos:
    image: nacos/nacos-server:v3.1.0-slim
    container_name: rose-nacos
    restart: always
    environment:
      - MODE=standalone
      - PREFER_HOST_MODE=hostname
      - SPRING_DATASOURCE_PLATFORM=mysql
      - MYSQL_SERVICE_HOST=rose-mysql
      - MYSQL_SERVICE_DB_NAME=nacos
      - MYSQL_SERVICE_USER=root
      - MYSQL_SERVICE_PASSWORD=123456
      - NACOS_AUTH_IDENTITY_KEY=KEY_123456
      - NACOS_AUTH_IDENTITY_VALUE=VALUE_123456
      - NACOS_AUTH_TOKEN=SecretKey012345678901234567890123456789012345678901234567890123456789
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"

  rose-xxl-job:
    image: xuxueli/xxl-job-admin:2.5.0
    ports:
      - "8040:8080"
    environment:
      PARAMS: '
        --spring.datasource.url=jdbc:mysql://${MYSQL_HOST:rose-mysql}:3306/xxl_job?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&allowMultiQueries=true
        --spring.datasource.username=root
        --spring.datasource.password=123456
        --xxl.job.accessToken=xxl-job'

  rose-monitor:
    image: codecentric/spring-boot-admin:3.4.1
    ports:
      - "7010:7010"
    environment:
      -
  rose-sentinel:
    image: bladex/sentinel-dashboard:1.8.8
    container_name: rose-sentinel
    restart: always
    ports:
      - "8858:8858"

  rose-redis:
    image: redis:7
    container_name: rose-redis
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    command: "redis-server --appendonly yes"
    healthcheck:
      test: [ "CMD", "redis-cli","--raw", "incr","ping" ]
      interval: 5s
      timeout: 2s
      retries: 10
    ports:
      - "6379:6379"

  rose-canal-server:
    image: canal/canal-server
    container_name: rose-canal-server
    ports:
      - "11111:11111"
    environment:
      - canal.auto.scan=false
      - canal.instance.master.address=rose-mysql:3306
      - canal.instance.dbUsername=canal
      - canal.instance.dbPassword=canal
      - canal.admin.register.auto=true
      - canal.instance.filter.regex=.*\\..*
      - canal.destinations=test
      - canal.instance.tsdb.enable=false
      - canal.instance.connectionCharset=UTF-8

  rose-canal-admin:
    image: canal/canal-admin
    container_name: rose-canal-admin
    ports:
      - "8089:8089"
    environment:
      - canal.adminUser=admin
      - canal.adminPasswd=123456
      - spring.datasource.url=jdbc:mysql://rose-mysql:3306/canal_manager?autoReconnect=true&useUnicode=true
      - spring.datasource.username=root
      - spring.datasource.password=root

  redis-node1:
    image: redis:7
    container_name: redis-node1
    command: redis-server --port 7001 --requirepass redis --cluster-enabled yes --appendonly yes
    ports:
      - "7001:7001"
      - "17001:17001"

  redis-node2:
    image: redis:7
    container_name: redis-node2
    command: redis-server --port 7002 --requirepass redis --cluster-enabled yes --appendonly yes
    ports:
      - "7002:7002"
      - "17002:17002"

  redis-node3:
    image: redis:7
    container_name: redis-node3
    command: redis-server --port 7003 --requirepass redis --cluster-enabled yes --appendonly yes
    ports:
      - "7003:7003"
      - "17003:17003"

  redis-node4:
    image: redis:7
    container_name: redis-node4
    command: redis-server --port 7004 --requirepass redis --cluster-enabled yes --appendonly yes
    ports:
      - "7004:7004"
      - "17004:17004"

  redis-node5:
    image: redis:7
    container_name: redis-node5
    command: redis-server --port 7005 --requirepass redis --cluster-enabled yes --appendonly yes
    ports:
      - "7005:7005"
      - "17005:17005"

  redis-node6:
    image: redis:7
    container_name: redis-node6
    command: >
      sh -c "redis-server --port 7006 --requirepass redis --cluster-enabled yes --appendonly yes
      && sleep 5 &&
      echo 'yes' | redis-cli -h redis-node1 -p 7001 --cluster create redis-node1:7001 redis-node2:7002 redis-node3:7003 redis-node4:7004 redis-node5:7005 redis-node6:7006 --cluster-replicas 1 --pass redis"
    ports:
      - "7006:7006"
      - "17006:17006"
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
      - redis-node4
      - redis-node5

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  sonar:
    image: sonarqube
    environment:
      - SONAR_FORCEAUTHENTICATION=false
    ports:
      - "9001:9000"
      - "9000:9000"
